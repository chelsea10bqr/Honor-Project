int32_t
dijkstra (graph_t* g, heap_t* h, vertex_set_t* src, vertex_set_t* dest,
          path_t* path)
{

    h->n_elts = 0;
    int32_t i,final_index;
    for (i = 0; i<g->n_vertices; i++){
      g->vertex[i].heap_id = -1;
      g->vertex[i].pred = -1;
      g->vertex[i].from_src = 0;
      g->vertex[i].processed = 0;
    }
    for (i = 0; i< src->count; i++){
      insert (src->id[i],g,h);
    }
    while ((final_index=process(g,h,dest))==-1);


    return 0;
}

void insert (int32_t idx, graph_t* g, heap_t* h)
{
    h->elt[h->n_elts] = idx;
    g->vertex[idx].heap_id = h->n_elts;
    h->n_elts ++;

}

int32_t pop_out (graph_t* g, heap_t* h)
{
    int32_t temp_index,i;
    int32_t min = MY_INFINITY;
    for (i = 0; i<h->n_elts; i++){
      if (g->vertex[h->elt[i]].from_src<min){
        min = g->vertex[h->elt[i]].from_src;
        temp_index = i;
      }
    }
    int32_t temporary;
    temp = h->elt[temp_index];
    h->elt[temp_index] = h->elt[h->n_elts-1];
    h->elt[h->n_elts-1] = temporary;
    h->n_elts--;
    g->vertex[h->elt[h->n_elts]].heap_id = -1;
    g->vertex[h->elt[temp_index]].heap_id = temp_index;
    return h->elt[h->n_elts];
}

int32_t process (graph_t* g, heap_t* h, vertex_set_t* dest)
{
    int32_t index = pop_out(g,h);
    if (in_dest (g,idx,dest))
      return idx;
    g->vertex[idx].processed = 1;
    int32_t i;
    for (i=0; i<g->vertex[idx].n_neighbors; i++){
      int32_t nei_idx = g->vertex[idx].neighbor[i];
      if(g->vertex[nei_idx].processed)
        continue;
      if (update(g,h,idx,i)){
        g->vertex[nei_idx].pred = idx;
      }
    }
    return -1;
}

int in_dest (graph_t* g, int32_t idx, vertex_set_t* dest)
{
    int32_t i;
    for (i=0; i< dest->count; i++){
      if (idx==dest->id[i])
        return 1;
    }
    return 0;
}

int update (graph_t* g, heap_t* h, int32_t curr_idx, int32_t nei_arr_idx)
{
    int32_t new_dist = g->vertex[curr_idx].from_src+g->vertex[curr_idx].distance[nei_arr_idx];
    int32_t nei_idx = g->vertex[curr_idx].neighbor[nei_arr_idx];
    if (g->vertex[nei_idx].heap_id==-1){
      g->vertex[nei_idx].from_src = new_dist;
      insert (nei_idx,g,h);
      return 1;
    }
    else if (g->vertex[nei_idx].from_src>new_dist){
      g->vertex[nei_idx].from_src = new_dist;
      return 1;
    }
    else{
      return 0;
 }
}
